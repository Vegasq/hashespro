async function getPyWhatHashTypes(){
    var knownHashTypes = [];
    var resp = await fetch("https://raw.githubusercontent.com/bee-san/pyWhat/main/pywhat/Data/regex.json");
    var data = await resp.json();

    for (var i = data.length - 1; i >= 0; i--) {
        try {
            var r = new RegExp(data[i].Regex, 'i');
        } catch(err) {
            continue;
        }
        knownHashTypes.push({
            name: "pyWhat: " + data[i].Name,
            re: r,
        });
    }

    return knownHashTypes;
}

async function getHaitiHashTypes(){
    var knownHashTypes = [];
    var resp = await fetch("https://raw.githubusercontent.com/noraj/haiti/master/data/prototypes.json");
    var data = await resp.json();

    for (var i = data.length - 1; i >= 0; i--) {
        var r = new RegExp(data[i].regex, 'i');
        for (var j = data[i].modes.length - 1; j >= 0; j--) {
            knownHashTypes.push({
                name: "haiti: " + data[i].modes[j].name,
                re: r,
                hashcat: data[i].modes[j].hashcat,
                john: data[i].modes[j].john,
            });

        }
    }

    return knownHashTypes;
}

async function getNTHHashTypes(){
    var knownHashTypes = [];
    var resp = await fetch("https://raw.githubusercontent.com/HashPals/Name-That-Hash/main/name_that_hash/hashes.py");
    var data = await resp.text();

    let hashProto = new RegExp(/re\.compile\(r\"(.+?)\".*?modes=\[(.*?)\]/, 'gms');
    let regexExtractor = new RegExp(/re\.compile\(r\"(.*?)\"/, 'gms');
    let nameExtractor = new RegExp(/name=.?\"(.*?)\"/, 'gms');
    let hashcatExtractor = new RegExp(/hashcat=(\d+?),/, 'gms');
    let johnExtractor = new RegExp(/john=\"(.+?)\",/, 'gms');

    const found = data.match(hashProto);
    for (var i = found.length - 1; i >= 0; i--) {
        var regexes = [...found[i].matchAll(regexExtractor)];
        var names = [...found[i].matchAll(nameExtractor)];
        var hashcatModes = [...found[i].matchAll(hashcatExtractor)];;
        var johnModes = [...found[i].matchAll(johnExtractor)];

        if (regexes !== undefined) {
            var r = new RegExp(regexes[0][1], 'i');

            if (hashcatModes !== undefined && hashcatModes.length > 0) {
                hashcatModes = hashcatModes[0][1];
            }
            if (johnModes !== undefined && johnModes.length > 0) {
                johnModes = johnModes[0][1];
            }

            knownHashTypes.push({
                name: "NTH: " + names[0][1],
                re: r,
                hashcat: hashcatModes,
                john: johnModes,
            });
        }
    }
    return knownHashTypes;
}

function identifyHash(hashTypes, hash){
    var results = [];
    for (var j = hashTypes.length - 1; j >= 0; j--) {
        var match = hash.match(hashTypes[j].re);
        if (match !== null) {
            results.push({
                hash: hash,
                hashType: hashTypes[j],
            });
        }
    }
    return results;
}

function displayResults(results){
    var table = "";
    var row = "";
    for (var i = results.length - 1; i >= 0; i--) {
        var result = results[i];
        if (results[i].hashType !== undefined) {
            row = `<tr>
                <td class="wordwrap">${result.hash}</td>
                <td>${result.hashType.name}</td>
                <td>${result.hashType.hashcat}</td>
                <td>${result.hashType.john}</td>
            </tr>`;
        } else {
            row = `<tr>
                <td>${result.hash}</td>
                <td>?</td>
                <td>?</td>
                <td>?</td>
            </tr>`;
        }
        table += row;
    }

    document.getElementById("results").innerHTML = table;
    document.getElementById("results").parentNode.classList.remove('d-none');
}

async function identify(){
    let hashesFieldValue = document.getElementById("hashesInputField").value;
    let hashes = hashesFieldValue.split("\n");
    var haitiHashTypes = await getHaitiHashTypes();
    var nthHashTypes = await getNTHHashTypes();
    var pywhatHashTypes = await getPyWhatHashTypes();

    var hashTypes = haitiHashTypes.concat(nthHashTypes);
    var hashTypes = hashTypes.concat(pywhatHashTypes);

    var results = [];
    for (var i = hashes.length - 1; i >= 0; i--) {
        var detected = identifyHash(hashTypes, hashes[i]);
        for (var j = detected.length - 1; j >= 0; j--) {
            results.push(detected[j]);
        }
    }
    displayResults(results);
};

// Character encoding maps
const encodingMaps = {
    // CP1251 (Windows Cyrillic) encoding map
    cp1251: {
        0x80: 0x0402, 0x81: 0x0403, 0x82: 0x201A, 0x83: 0x0453, 0x84: 0x201E, 0x85: 0x2026, 0x86: 0x2020, 0x87: 0x2021,
        0x88: 0x20AC, 0x89: 0x2030, 0x8A: 0x0409, 0x8B: 0x2039, 0x8C: 0x040A, 0x8D: 0x040C, 0x8E: 0x040B, 0x8F: 0x040F,
        0x90: 0x0452, 0x91: 0x2018, 0x92: 0x2019, 0x93: 0x201C, 0x94: 0x201D, 0x95: 0x2022, 0x96: 0x2013, 0x97: 0x2014,
        0x98: 0x0098, 0x99: 0x2122, 0x9A: 0x0459, 0x9B: 0x203A, 0x9C: 0x045A, 0x9D: 0x045C, 0x9E: 0x045B, 0x9F: 0x045F,
        0xA0: 0x00A0, 0xA1: 0x040E, 0xA2: 0x045E, 0xA3: 0x0408, 0xA4: 0x00A4, 0xA5: 0x0490, 0xA6: 0x00A6, 0xA7: 0x00A7,
        0xA8: 0x0401, 0xA9: 0x00A9, 0xAA: 0x0404, 0xAB: 0x00AB, 0xAC: 0x00AC, 0xAD: 0x00AD, 0xAE: 0x00AE, 0xAF: 0x0407,
        0xB0: 0x00B0, 0xB1: 0x00B1, 0xB2: 0x0406, 0xB3: 0x0456, 0xB4: 0x0491, 0xB5: 0x00B5, 0xB6: 0x00B6, 0xB7: 0x00B7,
        0xB8: 0x0451, 0xB9: 0x2116, 0xBA: 0x0454, 0xBB: 0x00BB, 0xBC: 0x0458, 0xBD: 0x0405, 0xBE: 0x0455, 0xBF: 0x0457,
        0xC0: 0x0410, 0xC1: 0x0411, 0xC2: 0x0412, 0xC3: 0x0413, 0xC4: 0x0414, 0xC5: 0x0415, 0xC6: 0x0416, 0xC7: 0x0417,
        0xC8: 0x0418, 0xC9: 0x0419, 0xCA: 0x041A, 0xCB: 0x041B, 0xCC: 0x041C, 0xCD: 0x041D, 0xCE: 0x041E, 0xCF: 0x041F,
        0xD0: 0x0420, 0xD1: 0x0421, 0xD2: 0x0422, 0xD3: 0x0423, 0xD4: 0x0424, 0xD5: 0x0425, 0xD6: 0x0426, 0xD7: 0x0427,
        0xD8: 0x0428, 0xD9: 0x0429, 0xDA: 0x042A, 0xDB: 0x042B, 0xDC: 0x042C, 0xDD: 0x042D, 0xDE: 0x042E, 0xDF: 0x042F,
        0xE0: 0x0430, 0xE1: 0x0431, 0xE2: 0x0432, 0xE3: 0x0433, 0xE4: 0x0434, 0xE5: 0x0435, 0xE6: 0x0436, 0xE7: 0x0437,
        0xE8: 0x0438, 0xE9: 0x0439, 0xEA: 0x043A, 0xEB: 0x043B, 0xEC: 0x043C, 0xED: 0x043D, 0xEE: 0x043E, 0xEF: 0x043F,
        0xF0: 0x0440, 0xF1: 0x0441, 0xF2: 0x0442, 0xF3: 0x0443, 0xF4: 0x0444, 0xF5: 0x0445, 0xF6: 0x0446, 0xF7: 0x0447,
        0xF8: 0x0448, 0xF9: 0x0449, 0xFA: 0x044A, 0xFB: 0x044B, 0xFC: 0x044C, 0xFD: 0x044D, 0xFE: 0x044E, 0xFF: 0x044F
    },
    
    // KOI8-R (Russian) encoding map
    koi8r: {
        0x80: 0x2500, 0x81: 0x2502, 0x82: 0x250C, 0x83: 0x2510, 0x84: 0x2514, 0x85: 0x2518, 0x86: 0x251C, 0x87: 0x2524,
        0x88: 0x252C, 0x89: 0x2534, 0x8A: 0x253C, 0x8B: 0x2580, 0x8C: 0x2584, 0x8D: 0x2588, 0x8E: 0x258C, 0x8F: 0x2590,
        0x90: 0x2591, 0x91: 0x2592, 0x92: 0x2593, 0x93: 0x2320, 0x94: 0x25A0, 0x95: 0x2219, 0x96: 0x221A, 0x97: 0x2248,
        0x98: 0x2264, 0x99: 0x2265, 0x9A: 0x00A0, 0x9B: 0x2321, 0x9C: 0x00B0, 0x9D: 0x00B2, 0x9E: 0x00B7, 0x9F: 0x00F7,
        0xA0: 0x2550, 0xA1: 0x2551, 0xA2: 0x2552, 0xA3: 0x0451, 0xA4: 0x2553, 0xA5: 0x2554, 0xA6: 0x2555, 0xA7: 0x2556,
        0xA8: 0x2557, 0xA9: 0x2558, 0xAA: 0x2559, 0xAB: 0x255A, 0xAC: 0x255B, 0xAD: 0x255C, 0xAE: 0x255D, 0xAF: 0x255E,
        0xB0: 0x255F, 0xB1: 0x2560, 0xB2: 0x2561, 0xB3: 0x0401, 0xB4: 0x2562, 0xB5: 0x2563, 0xB6: 0x2564, 0xB7: 0x2565,
        0xB8: 0x2566, 0xB9: 0x2567, 0xBA: 0x2568, 0xBB: 0x2569, 0xBC: 0x256A, 0xBD: 0x256B, 0xBE: 0x256C, 0xBF: 0x00A9,
        0xC0: 0x044E, 0xC1: 0x0430, 0xC2: 0x0431, 0xC3: 0x0446, 0xC4: 0x0434, 0xC5: 0x0435, 0xC6: 0x0444, 0xC7: 0x0433,
        0xC8: 0x0445, 0xC9: 0x0438, 0xCA: 0x0439, 0xCB: 0x043A, 0xCC: 0x043B, 0xCD: 0x043C, 0xCE: 0x043D, 0xCF: 0x043E,
        0xD0: 0x043F, 0xD1: 0x044F, 0xD2: 0x0440, 0xD3: 0x0441, 0xD4: 0x0442, 0xD5: 0x0443, 0xD6: 0x0436, 0xD7: 0x0432,
        0xD8: 0x044C, 0xD9: 0x044B, 0xDA: 0x0437, 0xDB: 0x0448, 0xDC: 0x044D, 0xDD: 0x0449, 0xDE: 0x0447, 0xDF: 0x044A,
        0xE0: 0x042E, 0xE1: 0x0410, 0xE2: 0x0411, 0xE3: 0x0426, 0xE4: 0x0414, 0xE5: 0x0415, 0xE6: 0x0424, 0xE7: 0x0413,
        0xE8: 0x0425, 0xE9: 0x0418, 0xEA: 0x0419, 0xEB: 0x041A, 0xEC: 0x041B, 0xED: 0x041C, 0xEE: 0x041D, 0xEF: 0x041E,
        0xF0: 0x041F, 0xF1: 0x042F, 0xF2: 0x0420, 0xF3: 0x0421, 0xF4: 0x0422, 0xF5: 0x0423, 0xF6: 0x0416, 0xF7: 0x0412,
        0xF8: 0x042C, 0xF9: 0x042B, 0xFA: 0x0417, 0xFB: 0x0428, 0xFC: 0x042D, 0xFD: 0x0429, 0xFE: 0x0427, 0xFF: 0x042A
    },
    
    // CP866 (DOS Cyrillic) encoding map
    cp866: {
        0x80: 0x0410, 0x81: 0x0411, 0x82: 0x0412, 0x83: 0x0413, 0x84: 0x0414, 0x85: 0x0415, 0x86: 0x0416, 0x87: 0x0417,
        0x88: 0x0418, 0x89: 0x0419, 0x8A: 0x041A, 0x8B: 0x041B, 0x8C: 0x041C, 0x8D: 0x041D, 0x8E: 0x041E, 0x8F: 0x041F,
        0x90: 0x0420, 0x91: 0x0421, 0x92: 0x0422, 0x93: 0x0423, 0x94: 0x0424, 0x95: 0x0425, 0x96: 0x0426, 0x97: 0x0427,
        0x98: 0x0428, 0x99: 0x0429, 0x9A: 0x042A, 0x9B: 0x042B, 0x9C: 0x042C, 0x9D: 0x042D, 0x9E: 0x042E, 0x9F: 0x042F,
        0xA0: 0x0430, 0xA1: 0x0431, 0xA2: 0x0432, 0xA3: 0x0433, 0xA4: 0x0434, 0xA5: 0x0435, 0xA6: 0x0436, 0xA7: 0x0437,
        0xA8: 0x0438, 0xA9: 0x0439, 0xAA: 0x043A, 0xAB: 0x043B, 0xAC: 0x043C, 0xAD: 0x043D, 0xAE: 0x043E, 0xAF: 0x043F,
        0xE0: 0x0440, 0xE1: 0x0441, 0xE2: 0x0442, 0xE3: 0x0443, 0xE4: 0x0444, 0xE5: 0x0445, 0xE6: 0x0446, 0xE7: 0x0447,
        0xE8: 0x0448, 0xE9: 0x0449, 0xEA: 0x044A, 0xEB: 0x044B, 0xEC: 0x044C, 0xED: 0x044D, 0xEE: 0x044E, 0xEF: 0x044F,
        0xF0: 0x2591, 0xF1: 0x2592, 0xF2: 0x2593, 0xF3: 0x2502, 0xF4: 0x2524, 0xF5: 0x2561, 0xF6: 0x2562, 0xF7: 0x2556,
        0xF8: 0x2555, 0xF9: 0x2563, 0xFA: 0x2551, 0xFB: 0x2557, 0xFC: 0x255D, 0xFD: 0x255C, 0xFE: 0x255B, 0xFF: 0x2510
    },
    
    // ISO-8859-5 (Cyrillic) encoding map
    iso88595: {
        0xA0: 0x00A0, 0xA1: 0x0401, 0xA2: 0x0402, 0xA3: 0x0403, 0xA4: 0x0404, 0xA5: 0x0405, 0xA6: 0x0406, 0xA7: 0x0407,
        0xA8: 0x0408, 0xA9: 0x0409, 0xAA: 0x040A, 0xAB: 0x040B, 0xAC: 0x040C, 0xAD: 0x00AD, 0xAE: 0x040E, 0xAF: 0x040F,
        0xB0: 0x0410, 0xB1: 0x0411, 0xB2: 0x0412, 0xB3: 0x0413, 0xB4: 0x0414, 0xB5: 0x0415, 0xB6: 0x0416, 0xB7: 0x0417,
        0xB8: 0x0418, 0xB9: 0x0419, 0xBA: 0x041A, 0xBB: 0x041B, 0xBC: 0x041C, 0xBD: 0x041D, 0xBE: 0x041E, 0xBF: 0x041F,
        0xC0: 0x0420, 0xC1: 0x0421, 0xC2: 0x0422, 0xC3: 0x0423, 0xC4: 0x0424, 0xC5: 0x0425, 0xC6: 0x0426, 0xC7: 0x0427,
        0xC8: 0x0428, 0xC9: 0x0429, 0xCA: 0x042A, 0xCB: 0x042B, 0xCC: 0x042C, 0xCD: 0x042D, 0xCE: 0x042E, 0xCF: 0x042F,
        0xD0: 0x0430, 0xD1: 0x0431, 0xD2: 0x0432, 0xD3: 0x0433, 0xD4: 0x0434, 0xD5: 0x0435, 0xD6: 0x0436, 0xD7: 0x0437,
        0xD8: 0x0438, 0xD9: 0x0439, 0xDA: 0x043A, 0xDB: 0x043B, 0xDC: 0x043C, 0xDD: 0x043D, 0xDE: 0x043E, 0xDF: 0x043F,
        0xE0: 0x0440, 0xE1: 0x0441, 0xE2: 0x0442, 0xE3: 0x0443, 0xE4: 0x0444, 0xE5: 0x0445, 0xE6: 0x0446, 0xE7: 0x0447,
        0xE8: 0x0448, 0xE9: 0x0449, 0xEA: 0x044A, 0xEB: 0x044B, 0xEC: 0x044C, 0xED: 0x044D, 0xEE: 0x044E, 0xEF: 0x044F,
        0xF0: 0x2116, 0xF1: 0x0451, 0xF2: 0x0452, 0xF3: 0x0453, 0xF4: 0x0454, 0xF5: 0x0455, 0xF6: 0x0456, 0xF7: 0x0457,
        0xF8: 0x0458, 0xF9: 0x0459, 0xFA: 0x045A, 0xFB: 0x045B, 0xFC: 0x045C, 0xFD: 0x00A7, 0xFE: 0x045E, 0xFF: 0x045F
    },
    
    // Latin1 (ISO-8859-1) encoding map
    latin1: {
        0xA0: 0x00A0, 0xA1: 0x00A1, 0xA2: 0x00A2, 0xA3: 0x00A3, 0xA4: 0x00A4, 0xA5: 0x00A5, 0xA6: 0x00A6, 0xA7: 0x00A7,
        0xA8: 0x00A8, 0xA9: 0x00A9, 0xAA: 0x00AA, 0xAB: 0x00AB, 0xAC: 0x00AC, 0xAD: 0x00AD, 0xAE: 0x00AE, 0xAF: 0x00AF,
        0xB0: 0x00B0, 0xB1: 0x00B1, 0xB2: 0x00B2, 0xB3: 0x00B3, 0xB4: 0x00B4, 0xB5: 0x00B5, 0xB6: 0x00B6, 0xB7: 0x00B7,
        0xB8: 0x00B8, 0xB9: 0x00B9, 0xBA: 0x00BA, 0xBB: 0x00BB, 0xBC: 0x00BC, 0xBD: 0x00BD, 0xBE: 0x00BE, 0xBF: 0x00BF,
        0xC0: 0x00C0, 0xC1: 0x00C1, 0xC2: 0x00C2, 0xC3: 0x00C3, 0xC4: 0x00C4, 0xC5: 0x00C5, 0xC6: 0x00C6, 0xC7: 0x00C7,
        0xC8: 0x00C8, 0xC9: 0x00C9, 0xCA: 0x00CA, 0xCB: 0x00CB, 0xCC: 0x00CC, 0xCD: 0x00CD, 0xCE: 0x00CE, 0xCF: 0x00CF,
        0xD0: 0x00D0, 0xD1: 0x00D1, 0xD2: 0x00D2, 0xD3: 0x00D3, 0xD4: 0x00D4, 0xD5: 0x00D5, 0xD6: 0x00D6, 0xD7: 0x00D7,
        0xD8: 0x00D8, 0xD9: 0x00D9, 0xDA: 0x00DA, 0xDB: 0x00DB, 0xDC: 0x00DC, 0xDD: 0x00DD, 0xDE: 0x00DE, 0xDF: 0x00DF,
        0xE0: 0x00E0, 0xE1: 0x00E1, 0xE2: 0x00E2, 0xE3: 0x00E3, 0xE4: 0x00E4, 0xE5: 0x00E5, 0xE6: 0x00E6, 0xE7: 0x00E7,
        0xE8: 0x00E8, 0xE9: 0x00E9, 0xEA: 0x00EA, 0xEB: 0x00EB, 0xEC: 0x00EC, 0xED: 0x00ED, 0xEE: 0x00EE, 0xEF: 0x00EF,
        0xF0: 0x00F0, 0xF1: 0x00F1, 0xF2: 0x00F2, 0xF3: 0x00F3, 0xF4: 0x00F4, 0xF5: 0x00F5, 0xF6: 0x00F6, 0xF7: 0x00F7,
        0xF8: 0x00F8, 0xF9: 0x00F9, 0xFA: 0x00FA, 0xFB: 0x00FB, 0xFC: 0x00FC, 0xFD: 0x00FD, 0xFE: 0x00FE, 0xFF: 0x00FF
    }
};

// Convert hex to string using the specified encoding
function convertHexToString() {
    const hexInput = document.getElementById("hexInputField").value.trim();
    const hexResult = document.getElementById("hexResult");
    const encodingSelect = document.getElementById("encodingSelect");
    const selectedEncoding = encodingSelect.value;
    
    // Update the displayed encoding
    document.getElementById("resultEncoding").textContent = encodingSelect.options[encodingSelect.selectedIndex].text;
    
    // Remove any spaces or line breaks
    const cleanHex = hexInput.replace(/[\s\n]/g, '');
    
    // Check if input is valid hex
    if (!/^[0-9A-Fa-f]*$/.test(cleanHex)) {
        hexResult.textContent = "Error: Input contains non-hexadecimal characters";
        return;
    }
    
    // Check if we have an even number of characters
    if (cleanHex.length % 2 !== 0) {
        hexResult.textContent = "Error: Hex string must have an even number of characters";
        return;
    }
    
    try {
        let result = '';
        // Convert hex to string
        for (let i = 0; i < cleanHex.length; i += 2) {
            const hexByte = cleanHex.substr(i, 2);
            const charCode = parseInt(hexByte, 16);
            
            if (selectedEncoding === 'utf8') {
                // UTF-8 (default JavaScript encoding)
                result += String.fromCharCode(charCode);
            } else {
                // Use the encoding map
                const encodingMap = encodingMaps[selectedEncoding];
                if (charCode < 0x80) {
                    // ASCII range (0-127) is the same for all encodings
                    result += String.fromCharCode(charCode);
                } else if (encodingMap && encodingMap[charCode]) {
                    // Use the mapping for this encoding
                    result += String.fromCharCode(encodingMap[charCode]);
                } else {
                    // If no mapping exists, use the original character code
                    result += String.fromCharCode(charCode);
                }
            }
        }
        
        hexResult.textContent = result;
    } catch (error) {
        hexResult.textContent = "Error: " + error.message;
    }
}

// Convert string to hex using the specified encoding
function convertStringToHex() {
    const stringInput = document.getElementById("stringInputField").value;
    const stringResult = document.getElementById("stringResult");
    const encodingSelect = document.getElementById("stringEncodingSelect");
    const selectedEncoding = encodingSelect.value;
    
    // Update the displayed encoding
    document.getElementById("stringResultEncoding").textContent = encodingSelect.options[encodingSelect.selectedIndex].text;
    
    try {
        let result = '';
        
        // For non-UTF8 encodings, we need to find the byte value for each character
        if (selectedEncoding !== 'utf8') {
            // Create a reverse mapping (Unicode code point -> byte value)
            const reverseMap = {};
            const encodingMap = encodingMaps[selectedEncoding];
            
            // Build the reverse mapping
            for (const byte in encodingMap) {
                if (encodingMap.hasOwnProperty(byte)) {
                    reverseMap[encodingMap[byte]] = parseInt(byte, 10);
                }
            }
            
            // Process each character
            for (let i = 0; i < stringInput.length; i++) {
                const char = stringInput.charAt(i);
                const codePoint = char.charCodeAt(0);
                
                if (codePoint < 128) {
                    // ASCII range (0-127) is the same for all encodings
                    result += codePoint.toString(16).padStart(2, '0');
                } else if (reverseMap[codePoint]) {
                    // Use the reverse mapping for this encoding
                    result += reverseMap[codePoint].toString(16).padStart(2, '0');
                } else {
                    // If no mapping exists, use UTF-8 encoding
                    result += codePoint.toString(16).padStart(2, '0');
                }
            }
        } else {
            // UTF-8 (default JavaScript encoding)
            for (let i = 0; i < stringInput.length; i++) {
                const charCode = stringInput.charCodeAt(i);
                result += charCode.toString(16).padStart(2, '0');
            }
        }
        
        // Format the result with spaces between bytes for readability
        const formattedResult = result.match(/.{2}/g)?.join(' ') || '';
        stringResult.textContent = formattedResult;
    } catch (error) {
        stringResult.textContent = "Error: " + error.message;
    }
}

(function init(){
    // Initialize hash identifier
    let identifyButton = document.getElementById("identify");
    identifyButton.addEventListener("click", identify);
    
    // Initialize hex to string converter
    let convertHexButton = document.getElementById("convertHex");
    convertHexButton.addEventListener("click", convertHexToString);
    
    // Initialize string to hex converter
    let convertStringButton = document.getElementById("convertString");
    convertStringButton.addEventListener("click", convertStringToHex);
    
    // Initialize hex to string encoding select
    let hexEncodingSelect = document.getElementById("encodingSelect");
    hexEncodingSelect.addEventListener("change", function() {
        document.getElementById("resultEncoding").textContent = this.options[this.selectedIndex].text;
    });
    
    // Initialize string to hex encoding select
    let stringEncodingSelect = document.getElementById("stringEncodingSelect");
    stringEncodingSelect.addEventListener("change", function() {
        document.getElementById("stringResultEncoding").textContent = this.options[this.selectedIndex].text;
    });
    
    // Initialize Bootstrap tabs
    $('#featureTabs a').on('click', function (e) {
        e.preventDefault();
        $(this).tab('show');
    });
})();
